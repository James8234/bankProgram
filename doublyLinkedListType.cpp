#include "nodeType.h"#include "doublyLinkedListType.h"#include "bankAccountType.h"#include <iostream>/** * file doublyLinkedListType.cpp * * @brief * The purpose of this file is the contain the functions */doublyLinkedListType::doublyLinkedListType(){	head = nullptr;	tail = nullptr;}doublyLinkedListType::~doublyLinkedListType(){	deleteNodeType();}/** * file doublyLinkedListType.cpp * * @brief * The purpose of this file is the contain the functions */void doublyLinkedListType::createNodeType(bankAccountType *objData){	nodeType *newNode;	newNode = new nodeType;	newNode->data = objData;		newNode->next = nullptr;	newNode->prev = nullptr; //prevents errors	if(head == nullptr)	{		head = newNode;		tail = newNode;	}	else	{		tail->next = newNode;		newNode->prev = tail;		tail = newNode;	}}void doublyLinkedListType::deleteNodeType(){	nodeType *current;	nodeType *nextNode;	current = head;	while(current != nullptr)	{		nextNode = current->next;		delete current->data; //deletes the account		delete current; //deletes the node		current = nextNode;	}		head = nullptr;	tail = nullptr; //just in case}void doublyLinkedListType::traverseLinkedList(){	nodeType *currentPtr;	currentPtr = head;	while(head != nullptr && currentPtr != nullptr)	{		currentPtr->data->print();		currentPtr = currentPtr->next;	}//	cout << "Here is your head pointer" << head << " " << (head != nullptr) << endl;//	cout << "Hello" << endl;	cout << "head:" << (head != nullptr) << endl;	cin.ignore(10000 , '\n');}//testing functionvoid doublyLinkedListType::getHead(){	if (head != nullptr) 	{		cout << "head exists." << endl;	}	else	{		cout << "Head is nullptr" << endl;	}}